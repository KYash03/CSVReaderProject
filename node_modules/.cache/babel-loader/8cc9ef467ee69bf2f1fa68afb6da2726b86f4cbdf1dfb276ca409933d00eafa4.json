{"ast":null,"code":"var _jsxFileName = \"C:\\\\transcript-app\\\\src\\\\Transcript.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Papa from 'papaparse';\nimport Course from './Course';\nimport TranscriptDisplayTable from './TranscriptDisplayTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport {};\nconst Transcript = () => {\n  _s();\n  const [inDeveloperMode] = useState(false);\n  const [finalTranscriptCourses, setFinalTranscriptCourses] = useState([]);\n  const customFetch = async (url, options) => {\n    if (url.startsWith('file://')) {\n      const response = await fetch(url, {\n        ...options,\n        mode: 'no-cors'\n      });\n      return response;\n    }\n    return fetch(url, options);\n  };\n  const showFileChooserDialog = () => {\n    return new Promise(resolve => {\n      const input = window.prompt('Enter the path to the CSV file:');\n      if (input && isCSVFile(input)) {\n        resolve(input);\n      } else {\n        console.error('Invalid file! Please select a CSV file.');\n        resolve(undefined);\n      }\n    });\n  };\n  const isCSVFile = filePath => {\n    return filePath.toLowerCase().endsWith('.csv');\n  };\n  const readTranscriptCourses = async (csvFilePath, inDeveloperMode) => {\n    if (!csvFilePath) return;\n    console.log('Fetching CSV file:', csvFilePath);\n    const courses = [];\n    try {\n      const response = await customFetch(csvFilePath);\n      console.log('Fetch response:', response);\n      const text = await response.text();\n      console.log('Fetched text:', text);\n      Papa.parse(text, {\n        header: true,\n        dynamicTyping: true,\n        complete: results => {\n          results.data.forEach(csvRecord => {\n            const courseCodeAndNumber = csvRecord.Course;\n            const section = csvRecord.Section;\n            const tempGrade = csvRecord.Grade;\n            const letter = csvRecord.Letter;\n            const standing = csvRecord.Standing;\n            const tempCredit = csvRecord['Credits Earned'];\n            const session = csvRecord.Session;\n            const tempTerm = csvRecord.Term;\n            const program = csvRecord.Program;\n            const tempYear = csvRecord.Year;\n            const tempClassAverage = csvRecord['Class Avg'];\n            const grade = tempGrade.trim() === '' ? null : parseInt(tempGrade);\n            const term = tempTerm.trim() === '' ? null : parseInt(tempTerm);\n            const year = tempYear.trim() === '' ? null : parseInt(tempYear);\n            const classAverage = tempClassAverage.trim() === '' ? null : parseInt(tempClassAverage);\n            const credit = tempCredit.trim() === '' ? -1 : parseInt(tempCredit);\n            const [name, code] = courseCodeAndNumber.split(' ');\n            const course = new Course(name, parseInt(code), '', credit.toString(), 'Unknown', '', false, '', null, null, null, null, -1);\n            const transcriptCourse = {\n              course,\n              section,\n              grade,\n              letter,\n              standing,\n              session,\n              term,\n              program,\n              year,\n              classAverage,\n              isCompleted: function () {\n                return this.grade !== null && this.grade >= 50;\n              },\n              isInProgress: function () {\n                return this.grade === null && this.standing !== 'W';\n              },\n              getYearLevel: function () {\n                const i = this.course.getIndexOfFirstDigitInCourseCode();\n                if (i === -1) {\n                  return -1;\n                } else {\n                  return parseInt(this.course.code.toString().charAt(i));\n                }\n              }\n            };\n            courses.push(transcriptCourse);\n          });\n          setFinalTranscriptCourses(courses);\n        },\n        error: error => {\n          if (inDeveloperMode) {\n            console.error(error);\n          } else {\n            console.error('An error occurred while processing the CSV file.');\n          }\n        }\n      });\n    } catch (error) {\n      if (inDeveloperMode) {\n        console.error(error);\n      } else {\n        console.error('An error occurred while fetching the CSV file.');\n      }\n    }\n  };\n  const handleFileSelection = async () => {\n    //const csvFilePath = await showFileChooserDialog();\n    const csvFilePath = process.env.PUBLIC_URL + '/Data.csv?v=' + Date.now();\n    readTranscriptCourses(csvFilePath, inDeveloperMode);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFileSelection,\n      children: \"Choose CSV File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), finalTranscriptCourses.length > 0 && /*#__PURE__*/_jsxDEV(TranscriptDisplayTable, {\n      transcriptCourses: finalTranscriptCourses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n_s(Transcript, \"3M1HklyVan0ISsdEm4aZvVDEnFc=\");\n_c = Transcript;\nexport default Transcript;\nvar _c;\n$RefreshReg$(_c, \"Transcript\");","map":{"version":3,"names":["React","useState","Papa","Course","TranscriptDisplayTable","jsxDEV","_jsxDEV","Transcript","_s","inDeveloperMode","finalTranscriptCourses","setFinalTranscriptCourses","customFetch","url","options","startsWith","response","fetch","mode","showFileChooserDialog","Promise","resolve","input","window","prompt","isCSVFile","console","error","undefined","filePath","toLowerCase","endsWith","readTranscriptCourses","csvFilePath","log","courses","text","parse","header","dynamicTyping","complete","results","data","forEach","csvRecord","courseCodeAndNumber","section","Section","tempGrade","Grade","letter","Letter","standing","Standing","tempCredit","session","Session","tempTerm","Term","program","Program","tempYear","Year","tempClassAverage","grade","trim","parseInt","term","year","classAverage","credit","name","code","split","course","toString","transcriptCourse","isCompleted","isInProgress","getYearLevel","i","getIndexOfFirstDigitInCourseCode","charAt","push","handleFileSelection","process","env","PUBLIC_URL","Date","now","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","length","transcriptCourses","_c","$RefreshReg$"],"sources":["C:/transcript-app/src/Transcript.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Papa, { ParseError } from 'papaparse';\r\n\r\nimport { TranscriptCourse } from './TranscriptCourse';\r\nimport Course from './Course';\r\nimport TranscriptDisplayTable from './TranscriptDisplayTable';\r\nexport {};\r\n\r\nconst Transcript: React.FC = () => {\r\n  const [inDeveloperMode] = useState(false);\r\n  const [finalTranscriptCourses, setFinalTranscriptCourses] = useState<TranscriptCourse[]>([]);\r\n\r\n  const customFetch = async (url: string, options?: any) => {\r\n    if (url.startsWith('file://')) {\r\n      const response = await fetch(url, { ...options, mode: 'no-cors' });\r\n      return response;\r\n    }\r\n    return fetch(url, options);\r\n  };\r\n\r\n  const showFileChooserDialog = (): Promise<string | undefined> => {\r\n    return new Promise((resolve) => {\r\n      const input = window.prompt('Enter the path to the CSV file:');\r\n      if (input && isCSVFile(input)) {\r\n        resolve(input);\r\n      } else {\r\n        console.error('Invalid file! Please select a CSV file.');\r\n        resolve(undefined);\r\n      }\r\n    });\r\n  };\r\n\r\n  const isCSVFile = (filePath: string): boolean => {\r\n    return filePath.toLowerCase().endsWith('.csv');\r\n  };\r\n\r\n  const readTranscriptCourses = async (csvFilePath: string | undefined, inDeveloperMode: boolean) => {\r\n    if (!csvFilePath) return;\r\n\r\n    console.log ('Fetching CSV file:', csvFilePath);\r\n\r\n    const courses: TranscriptCourse[] = [];\r\n    try {\r\n      const response = await customFetch(csvFilePath);\r\n\r\n      console.log ('Fetch response:', response);\r\n\r\n      const text = await response.text();\r\n      console.log ('Fetched text:', text);\r\n\r\n      Papa.parse(text, {\r\n        header: true,\r\n        dynamicTyping: true,\r\n        complete: (results) => {\r\n          results.data.forEach((csvRecord: any) => {\r\n            const courseCodeAndNumber = csvRecord.Course;\r\n            const section = csvRecord.Section;\r\n            const tempGrade = csvRecord.Grade;\r\n            const letter = csvRecord.Letter;\r\n          const standing = csvRecord.Standing;\r\n          const tempCredit = csvRecord['Credits Earned'];\r\n          const session = csvRecord.Session;\r\n          const tempTerm = csvRecord.Term;\r\n          const program = csvRecord.Program;\r\n          const tempYear = csvRecord.Year;\r\n          const tempClassAverage = csvRecord['Class Avg'];\r\n          const grade = tempGrade.trim() === '' ? null : parseInt(tempGrade);\r\n          const term = tempTerm.trim() === '' ? null : parseInt(tempTerm);\r\n          const year = tempYear.trim() === '' ? null : parseInt(tempYear);\r\n          const classAverage = tempClassAverage.trim() === '' ? null : parseInt(tempClassAverage);\r\n          const credit = tempCredit.trim() === '' ? -1 : parseInt(tempCredit);\r\n\r\n          const [name, code] = courseCodeAndNumber.split(' ');\r\n\r\n          const course = new Course(name, parseInt(code), '', credit.toString(), 'Unknown', '', false, '', null, null, null, null, -1);\r\n\r\n            const transcriptCourse: TranscriptCourse = {\r\n            course,\r\n            section,\r\n            grade,\r\n            letter,\r\n            standing,\r\n            session,\r\n            term,\r\n            program,\r\n            year,\r\n            classAverage,\r\n            isCompleted: function (): boolean {\r\n              return this.grade !== null && this.grade >= 50;\r\n            },\r\n            isInProgress: function (): boolean {\r\n              return this.grade === null && this.standing !== 'W';\r\n            },\r\n            getYearLevel: function (): number {\r\n              const i = this.course.getIndexOfFirstDigitInCourseCode();\r\n              if (i === -1) {\r\n                return -1;\r\n              } else {\r\n                return parseInt(this.course.code.toString().charAt(i));\r\n              }\r\n            }\r\n          };\r\n\r\n            \r\n\r\n            courses.push(transcriptCourse);\r\n          });\r\n\r\n          setFinalTranscriptCourses(courses);\r\n        },\r\n        error: (error: any) => {\r\n          if (inDeveloperMode) {\r\n            console.error(error);\r\n          } else {\r\n            console.error('An error occurred while processing the CSV file.');\r\n          }\r\n        },\r\n      });\r\n\r\n    } catch (error) {\r\n      if (inDeveloperMode) {\r\n        console.error(error);\r\n      } else {\r\n        console.error('An error occurred while fetching the CSV file.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleFileSelection = async () => {\r\n    //const csvFilePath = await showFileChooserDialog();\r\n    const csvFilePath = process.env.PUBLIC_URL + '/Data.csv?v=' + Date.now();\r\n\r\n    readTranscriptCourses(csvFilePath, inDeveloperMode);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleFileSelection}>Choose CSV File</button>\r\n      {finalTranscriptCourses.length > 0 && (\r\n        <TranscriptDisplayTable transcriptCourses={finalTranscriptCourses} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Transcript;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}