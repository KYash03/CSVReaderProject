{"ast":null,"code":"var _jsxFileName = \"C:\\\\transcript-app\\\\src\\\\Transcript.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Papa from 'papaparse';\nimport Course from './Course';\nimport TranscriptDisplayTable from './TranscriptDisplayTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport {};\nconst Transcript = () => {\n  _s();\n  const [finalTranscriptCourses, setFinalTranscriptCourses] = useState([]);\n  const readTranscriptCourses = async csvFilePath => {\n    try {\n      const response = await fetch(csvFilePath);\n      if (!response.ok) {\n        throw new Error('Fetch failed with status: ' + response.status);\n      }\n      const text = await response.text();\n      Papa.parse(text, {\n        header: true,\n        dynamicTyping: true,\n        complete: results => {\n          const courses = results.data.map(csvRecord => {\n            const courseCodeAndNumber = csvRecord.Course;\n            const section = csvRecord.Section;\n            const grade = csvRecord.Grade ? parseInt(csvRecord.Grade) : null;\n            const letter = csvRecord.Letter;\n            const standing = csvRecord.Standing;\n            const credit = csvRecord['Credits Earned'] ? parseInt(csvRecord['Credits Earned']) : -1;\n            const session = csvRecord.Session;\n            const term = csvRecord.Term ? parseInt(csvRecord.Term) : null;\n            const program = csvRecord.Program;\n            const year = csvRecord.Year ? parseInt(csvRecord.Year) : null;\n            const classAverage = csvRecord['Class Avg'] ? parseInt(csvRecord['Class Avg']) : null;\n            const [name, code] = courseCodeAndNumber.split(' ');\n            const course = new Course(name, parseInt(code), '', credit.toString(), 'Unknown', '', false, '', null, null, null, null, -1);\n            const transcriptCourse = {\n              course,\n              section,\n              grade,\n              letter,\n              standing,\n              session,\n              term,\n              program,\n              year,\n              classAverage,\n              isCompleted: function () {\n                return this.grade !== null && this.grade >= 50;\n              },\n              isInProgress: function () {\n                return this.grade === null && this.standing !== 'W';\n              },\n              getYearLevel: function () {\n                const i = this.course.getIndexOfFirstDigitInCourseCode();\n                if (i === -1) {\n                  return -1;\n                } else {\n                  return parseInt(this.course.code.toString().charAt(i));\n                }\n              }\n            };\n            return transcriptCourse;\n          });\n          setFinalTranscriptCourses(courses);\n        },\n        error: error => {\n          console.error('An error occurred while processing the CSV file:', error);\n        }\n      });\n    } catch (error) {\n      console.error('An error occurred while fetching the CSV file:', error);\n    }\n  };\n  const handleFileSelection = () => {\n    const csvFilePath = process.env.PUBLIC_URL + '/Data.csv?v=' + Date.now();\n    readTranscriptCourses(csvFilePath);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFileSelection,\n      children: \"Choose CSV File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), finalTranscriptCourses.length > 0 && /*#__PURE__*/_jsxDEV(TranscriptDisplayTable, {\n      transcriptCourses: finalTranscriptCourses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(Transcript, \"+qxM681kGW8o0IYuDGO5cV5OeLk=\");\n_c = Transcript;\nexport default Transcript;\nvar _c;\n$RefreshReg$(_c, \"Transcript\");","map":{"version":3,"names":["React","useState","Papa","Course","TranscriptDisplayTable","jsxDEV","_jsxDEV","Transcript","_s","finalTranscriptCourses","setFinalTranscriptCourses","readTranscriptCourses","csvFilePath","response","fetch","ok","Error","status","text","parse","header","dynamicTyping","complete","results","courses","data","map","csvRecord","courseCodeAndNumber","section","Section","grade","Grade","parseInt","letter","Letter","standing","Standing","credit","session","Session","term","Term","program","Program","year","Year","classAverage","name","code","split","course","toString","transcriptCourse","isCompleted","isInProgress","getYearLevel","i","getIndexOfFirstDigitInCourseCode","charAt","error","console","handleFileSelection","process","env","PUBLIC_URL","Date","now","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","length","transcriptCourses","_c","$RefreshReg$"],"sources":["C:/transcript-app/src/Transcript.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Papa, { ParseError } from 'papaparse';\r\n\r\nimport { TranscriptCourse } from './TranscriptCourse';\r\nimport Course from './Course';\r\nimport TranscriptDisplayTable from './TranscriptDisplayTable';\r\nexport {};\r\n\r\nconst Transcript: React.FC = () => {\r\n  const [finalTranscriptCourses, setFinalTranscriptCourses] = useState<TranscriptCourse[]>([]);\r\n\r\n  const readTranscriptCourses = async (csvFilePath: string) => {\r\n    try {\r\n      const response = await fetch(csvFilePath);\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Fetch failed with status: ' + response.status);\r\n      }\r\n\r\n      const text = await response.text();\r\n\r\n      Papa.parse(text, {\r\n        header: true,\r\n        dynamicTyping: true,\r\n        complete: (results) => {\r\n          const courses: TranscriptCourse[] = results.data.map((csvRecord: any) => {\r\n            const courseCodeAndNumber = csvRecord.Course;\r\n            const section = csvRecord.Section;\r\n            const grade = csvRecord.Grade ? parseInt(csvRecord.Grade) : null;\r\n            const letter = csvRecord.Letter;\r\n            const standing = csvRecord.Standing;\r\n            const credit = csvRecord['Credits Earned'] ? parseInt(csvRecord['Credits Earned']) : -1;\r\n            const session = csvRecord.Session;\r\n            const term = csvRecord.Term ? parseInt(csvRecord.Term) : null;\r\n            const program = csvRecord.Program;\r\n            const year = csvRecord.Year ? parseInt(csvRecord.Year) : null;\r\n            const classAverage = csvRecord['Class Avg'] ? parseInt(csvRecord['Class Avg']) : null;\r\n\r\n            const [name, code] = courseCodeAndNumber.split(' ');\r\n\r\n            const course = new Course(name, parseInt(code), '', credit.toString(), 'Unknown', '', false, '', null, null, null, null, -1);\r\n\r\n            const transcriptCourse: TranscriptCourse = {\r\n              course,\r\n              section,\r\n              grade,\r\n              letter,\r\n              standing,\r\n              session,\r\n              term,\r\n              program,\r\n              year,\r\n              classAverage,\r\n              isCompleted: function (): boolean {\r\n                return this.grade !== null && this.grade >= 50;\r\n              },\r\n              isInProgress: function (): boolean {\r\n                return this.grade === null && this.standing !== 'W';\r\n              },\r\n              getYearLevel: function (): number {\r\n                const i = this.course.getIndexOfFirstDigitInCourseCode();\r\n                if (i === -1) {\r\n                  return -1;\r\n                } else {\r\n                  return parseInt(this.course.code.toString().charAt(i));\r\n                }\r\n              },\r\n            };\r\n\r\n            return transcriptCourse;\r\n          });\r\n\r\n          setFinalTranscriptCourses(courses);\r\n        },\r\n        error: (error: ParseError) => {\r\n          console.error('An error occurred while processing the CSV file:', error);\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.error('An error occurred while fetching the CSV file:', error);\r\n    }\r\n  };\r\n\r\n  const handleFileSelection = () => {\r\n    const csvFilePath = process.env.PUBLIC_URL + '/Data.csv?v=' + Date.now();\r\n    readTranscriptCourses(csvFilePath);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleFileSelection}>Choose CSV File</button>\r\n      {finalTranscriptCourses.length > 0 && (\r\n        <TranscriptDisplayTable transcriptCourses={finalTranscriptCourses} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Transcript;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}